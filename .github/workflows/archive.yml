name: Build and publish archives
on:
  push:
    tags:
      - "*"

jobs:
  # Build tar archives for all supported platforms
  build-archives:
    name: Build archives
    runs-on: ${{ matrix.os }}

    permissions:
      contents: write
      packages: write

    strategy:
      fail-fast: false
      matrix:
        toolchain: [stable]
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl

          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin

          - build: aarch64
            os: ubuntu-latest
            target: aarch64-unknown-linux-musl

          - build: i686
            os: ubuntu-latest
            target: i686-unknown-linux-musl

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          targets: ${{ matrix.target }}
          override: true
          default: true
          profile: minimal

      - name: Handle Rust dependencies caching
        uses: Swatinem/rust-cache@v2
        with:
          key: v1-${{ matrix.target }}

      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Build binaries
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --verbose --release --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          name="chimney"
          dirname="$name-${{ env.VERSION }}-${{ matrix.target }}"

          mkdir "$dirname"

          mv "target/${{ matrix.target }}/release/$name" "$dirname"

          tar -czf "$dirname.tar.gz" "$dirname"
          echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV

      - name: Upload release archive
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: false
          fail_on_unmatched_files: true
          files: |
            ${{ env.ASSET }}
